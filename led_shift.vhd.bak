library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity case_display_top is
	generic (clk_bit : integer := 4)
	port
	(
		clk: in std_logic;
		led: out std_logic_vector(7 downto 0);
	)
	end case_display_top
architecture display_arch of case_display_top is
	signal clk_div : std_logic_vector(clk_bit downto 0)
	signal count: std_logic_vector(4 downto 0) := "00000"
begin
	--clock divider
	process(clk)
	begin
		if(clk'event and clk ='1') then
			count <= count + '1';
			end if;
	end process;
	
	--led display
	process(count)
	begin
		case count is
				when "00000" => LED <=  "10000001";
            when "00001" => LED <=  "01000010";
            when "00010" => LED <=  "00100100";
            when "00011" => LED <=  "00011000";
            when "00100" => LED <=  "00100100";
            when "00101" => LED <=  "01000010";
            when "00110" => LED <=  "10000001";
            when "00111" => LED <=  "11000011";
            when "01000" => LED <=  "11100111";
            when "01001" => LED <=  "11111111";
            when "01010" => LED <=  "11100111";
            when "01011" => LED <=  "11000011";
            when "01100" => LED <=  "10000001";
            when "01101" => LED <=  "10000000";
            when "01111" => LED <=  "01000000";
            when "10000" => LED <=  "01100000";
            when "10001" => LED <=  "01100000";
            when "10010" => LED <=  "01110000";
            when "10011" => LED <=  "01111000";
            when "10100" => LED <=  "01111100";
            when "10101" => LED <=  "01111110";
            -- skip some numbers in count sequence
            when "10111" => LED <=  "10101010";
            when "11000" => LED <=  "01010101";
            when "11001" => LED <=  "10101010";
            when "11010" => LED <=  "01010101";
            when others => LED <=  "00000000";
			end case;
		end process;